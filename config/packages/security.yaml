security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  firewalls:
    web:
      pattern: ^/web/
      stateless: true
      provider: app_user_provider
      json_login:
        check_path: /web/login
        username_path: email
        password_path: password
      custom_authenticators:
        - App\Security\JwtAuthenticator
  access_control:
    - { path: ^/health$, roles: PUBLIC_ACCESS }
    - { path: ^/web/refresh, roles: PUBLIC_ACCESS }
    - { path: ^/web/logout, roles: PUBLIC_ACCESS }
    - { path: ^/web/login, roles: PUBLIC_ACCESS }
#    - { path: ^/web/admin, roles: ROLE_ADMIN }
#    - { path: ^/web, roles: ROLE_WEB_USER }
#    - { path: ^/api, roles: ROLE_API_USER }
  role_hierarchy:
    ROLE_ADMIN: [ ROLE_WEB_USER, ROLE_API_USER ]
    ROLE_WEB_USER: [ ROLE_USER ]
    ROLE_API_USER: [ ROLE_USER ]

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
